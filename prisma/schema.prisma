generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id            Int       @id @default(autoincrement())
  email         String?   @unique @db.VarChar(50)
  password      String?   @db.VarChar(256)
  firstName     String?   @db.VarChar(50)
  lastName      String?   @db.VarChar(50)
  mobile        String?   @unique @db.VarChar(10)
  displayName   String?   @db.VarChar(50)
  gender        Gender?
  dateOfBirth   DateTime?
  googleLogin   String?   @db.VarChar(256)
  profileImage  String?
  statusMessage Boolean   @default(false)
  isBlocked     Boolean   @default(false)
  blockDate     DateTime?
  role          Role      @default(BUYER)
  createdAt     DateTime  @default(now()) @db.Timestamp(0)
  updatedAt     DateTime  @updatedAt @db.Timestamp(0)

  Interest          Interest[]
  StoreProfile      StoreProfile?
  Follow            Follow[]
  Comment           Comment[]
  VoucherItem       VoucherItem[]
  InboxMessageAdmin InboxMessageAdmin[]
  userReceiver      InboxMessageUser[]  @relation("userReceiver")
  userSender        InboxMessageUser[]  @relation("userSender")
  Report            Report[]
}

model StoreProfile {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique
  name              String
  coverImage        String?
  sellerDescription String?  @db.Text
  description       String?  @db.Text
  facebook          String?
  instagram         String?
  line              String?
  storeProductType  String?
  createdAt         DateTime @default(now()) @db.Timestamp(0)
  updatedAt         DateTime @updatedAt @db.Timestamp(0)

  user Users @relation(fields: [userId], references: [id])

  Events      Events[]
  Product     Product[]
  VoucherItem VoucherItem[]
  Comment     Comment[]
  Follow      Follow[]
  Report      Report[]
}

model Follow {
  id             Int @id @default(autoincrement())
  storeProfileId Int
  userId         Int

  stores StoreProfile @relation(fields: [storeProfileId], references: [id])
  user   Users        @relation(fields: [userId], references: [id])
}

model Interest {
  id      Int @id @default(autoincrement())
  userId  Int
  eventId Int

  user  Users  @relation(fields: [userId], references: [id])
  event Events @relation(fields: [eventId], references: [id])
}

model Product {
  id             Int    @id @default(autoincrement())
  storeProfileId Int
  name           String
  description    String
  image          String
  price          Int
  unit           String

  storesProfile StoreProfile @relation(fields: [storeProfileId], references: [id])

  EventItem EventItem[]
}

model Events {
  id             Int      @id @default(autoincrement())
  storeProfileId Int
  name           String   @db.VarChar(100)
  images         String
  location       String
  locationName   String
  description    String   @db.Text
  startDate      DateTime @db.Date
  endDate        DateTime @db.Date
  openTime       DateTime @db.Time(0)
  closingTime    DateTime @db.Time(0)
  isActive       Boolean  @default(false)

  storeProfile StoreProfile @relation(fields: [storeProfileId], references: [id])

  Interest    Interest[]
  VoucherList VoucherList[]
  EventItem   EventItem[]
}

model Comment {
  id             Int      @id @default(autoincrement())
  storeProfileId Int
  userId         Int
  topic          String   @db.Text
  comment        String   @db.Text
  rate           Rate
  isVerify       Boolean  @default(false)
  createdAt      DateTime @default(now()) @db.Timestamp(0)

  storeProfile StoreProfile @relation(fields: [storeProfileId], references: [id])
  user         Users        @relation(fields: [userId], references: [id])
}

model EventItem {
  id        Int @id @default(autoincrement())
  eventId   Int
  productId Int

  event    Events  @relation(fields: [eventId], references: [id])
  products Product @relation(fields: [productId], references: [id])
}

model VoucherList {
  id          Int    @id @default(autoincrement())
  eventId     Int
  code        String @db.VarChar(20)
  description String @db.Text
  condition   String @db.Text
  totalAmount Int
  discount    Int
  image       String

  event Events @relation(fields: [eventId], references: [id])

  VoucherItem VoucherItem[]
}

model VoucherItem {
  id             Int               @id @default(autoincrement())
  voucherListId  Int
  storeProfileId Int
  userId         Int
  status         VoucherItemStatus @default(COLLECTED)
  voucherList    VoucherList       @relation(fields: [voucherListId], references: [id])
  storeProfile   StoreProfile      @relation(fields: [storeProfileId], references: [id])
  user           Users             @relation(fields: [userId], references: [id])
}

model InboxMessageAdmin {
  id           Int      @id @default(autoincrement())
  userIdSender Int
  topic        String
  message      String   @db.Text
  createdAt    DateTime @default(now()) @db.Timestamp(0)

  users       Users              @relation(fields: [userIdSender], references: [id])
  readMessage ReadMessageAdmin[]
}

model ReadMessageAdmin {
  id         Int               @id @default(autoincrement())
  adminId    Int
  userIdRead Int
  read       InboxMessageAdmin @relation(fields: [adminId], references: [id])
}

model InboxMessageUser {
  id             Int      @id @default(autoincrement())
  userIdSender   Int
  userIdReceiver Int?
  topic          String
  message        String   @db.Text
  isRead         Boolean  @default(false)
  createdAt      DateTime @default(now()) @db.Timestamp(0)
  userSender     Users    @relation("userSender", fields: [userIdSender], references: [id])
  userReceiver   Users?   @relation("userReceiver", fields: [userIdReceiver], references: [id])
}

model Report {
  id                   Int    @id @default(autoincrement())
  storeProfileReported Int
  userIdReporter       Int
  subject              String @db.Text
  message              String @db.Text
  image                String @db.Text

  storeProfile StoreProfile @relation(fields: [storeProfileReported], references: [id])
  user         Users        @relation(fields: [userIdReporter], references: [id])
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

enum Rate {
  ONE
  TWO
  THREE
  FOUR
  FIVE
}

enum VoucherItemStatus {
  COLLECTED
  USED
  EXPIRED
}
