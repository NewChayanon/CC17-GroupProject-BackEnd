// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id            Int       @id @default(autoincrement())
  email         String?   @unique @db.VarChar(50)
  password      String?   @db.VarChar(256)
  firstName     String?   @db.VarChar(50)
  lastName      String?   @db.VarChar(50)
  mobile        String?   @unique @db.VarChar(10)
  displayName   String?   @db.VarChar(50)
  gender        Gender
  googleLogin   String?
  profileImage  String?
  statusMessage Boolean   @default(false)
  isBlocked     Boolean   @default(false)
  blockDate     DateTime?
  role          Role

  StoreProfile StoreProfile?
  Follow       Follow[]
  Interest     Interest[]
  Comment      Comment[]
  VoucherItem  VoucherItem[]
  userSender   IndoxMessage[] @relation(name: "userSender")
  userReceiver IndoxMessage[] @relation(name: "userReceiver")
  userReporter Report[]       @relation(name: "userReporter")
  userReported Report[]       @relation(name: "userReported")
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

enum Role {
  BUYER
  SELLER
  ADMIN
}

model StoreProfile {
  id          Int    @id @default(autoincrement())
  userId      Int    @unique
  name        String
  coverImage  String
  discription String @db.Text

  user Users @relation(fields: [userId], references: [id])

  Follow  Follow[]
  Product Product[]
  Comment Comment[]
  Events  Events[]
}

model Follow {
  id             Int @id @default(autoincrement())
  storeProfileId Int
  userId         Int

  user   Users        @relation(fields: [userId], references: [id])
  stores StoreProfile @relation(fields: [storeProfileId], references: [id])
}

model Interest {
  id      Int @id @default(autoincrement())
  userId  Int
  eventId Int

  user  Users  @relation(fields: [userId], references: [id])
  event Events @relation(fields: [eventId], references: [id])
}

model Product {
  id             Int    @id @default(autoincrement())
  storeProfileId Int
  name           String
  discription    String
  image          String

  storesProfile StoreProfile @relation(fields: [storeProfileId], references: [id])

  EventItem EventItem[]
}

model Events {
  id             Int     @id @default(autoincrement())
  storeProfileId Int
  name           String  @db.VarChar(100)
  images         String
  location       String
  startDate      String
  endDate        String
  isActive       Boolean @default(false)

  storeProfile StoreProfile @relation(fields: [storeProfileId], references: [id])

  Interest    Interest[]
  VoucherList VoucherList[]
  EventItem   EventItem[]
}

model Comment {
  id             Int     @id @default(autoincrement())
  storeProfileId Int
  userId         Int
  comment        String?
  rate           Rate
  isVerify       Boolean @default(false)

  storeProfile StoreProfile @relation(fields: [storeProfileId], references: [id])
  user         Users        @relation(fields: [userId], references: [id])
}

enum Rate {
  ONE
  TWO
  THREE
  FOUR
  FIVE
}

model EventItem {
  id        Int @id @default(autoincrement())
  eventId   Int
  productId Int

  event    Events  @relation(fields: [eventId], references: [id])
  products Product @relation(fields: [productId], references: [id])
}

model VoucherList {
  id          Int    @id @default(autoincrement())
  eventId     Int
  code        String @db.VarChar(20)
  totalAmount Int

  event Events @relation(fields: [eventId], references: [id])

  VoucherItem VoucherItem[]
}

model VoucherItem {
  id            Int     @id @default(autoincrement())
  voucherListId Int
  userId        Int
  status        Boolean @default(false)

  voucherList VoucherList @relation(fields: [voucherListId], references: [id])
  user        Users       @relation(fields: [userId], references: [id])
}

model IndoxMessage {
  id             Int    @id @default(autoincrement())
  userIdSender   Int
  userIdReceiver Int
  topic          String
  message        String @db.Text

  userSender   Users @relation(name: "userSender", fields: [userIdSender], references: [id])
  userReceiver Users @relation(name: "userReceiver", fields: [userIdReceiver], references: [id])
}

model Report {
  id             Int @id @default(autoincrement())
  userIdReporter Int
  userIdReported Int

  userReporter Users @relation(name: "userReporter", fields: [userIdReporter], references: [id])
  userReported Users @relation(name: "userReported", fields: [userIdReported], references: [id])
}
